#-------------------------------------------------------------------------------
# bash-cloud-backup is a bash script, which can be used to automate local and cloud backup in Linux/Unix machines.
#
# COPYRIGHT......: Christos Pontikis - http://www.pontikis.gr
# LICENSE........: MIT (see https://opensource.org/licenses/MIT)
# PROJECT PAGE...: https://github.com/pontikis/bash-cloud-backup
# DOCUMENTATION..: See README.md for instructions
#                  See /conf.default for sample configuration files
#-------------------------------------------------------------------------------

# This is a sample configuration file, which defines which files or databases will be backed up

# COMMENTS
# Comments are permitted as independent lines. DO NOT COMMENT after param value.
# This is an invalid comment:
# param=value # invalid comment

# By default, bash-cloud-backup expects this file to be /etc/bash-cloud-backup/backup.conf
# But you may define as many 'backup.conf' you like. In this case. use:
#
# bash-cloud-backup.sh -b /path/to/mybackup.conf

# Each [section] defines a backup set
# ATTENTION: Spaces ARE NOT PERMITTED in section names
# ATTENTION: DO NOT USE quotes arround strings

# bash-cloud-backup will create all directories you define in configuration files (assuming it has the required permissions)

# Option 'type' can be
# - files -> backup a file set (folders and files), as defined in <fileset> option
# - mysql -> backup MySQL object(s)
# - postgresql -> backup Postgresql object(s)
#
# anything else in <type> is ignored

# Options common for all types - REQUIRED
# - type
# - path
# - prefix
# - starting_message
# - finish_message
# - number_of_files_per_backup (2 for type=files, 1 for type=mysql and postgresql)
#   except otherwise set (eg when you create 7z with multiple volumes).
#   Once you set it, you cannot change it.

# How bash-cloud-backup uses tar command:
# first a backup list is created according to <fileset>
# $TAR $tar_options_backup_list $listfile $tmpdir/backup_list 2>&1 | $TEE -a $logfile_tmp
# then
# $TAR $tar_options_backup_file $bkpfile -T $tmpdir/backup_list 2>&1 | $TEE -a $logfile_tmp

# How bash-cloud-backup uses mysqldump command:
# When dumping MySQL objects, the follow command is executed:
# if you do not provide password - e.g. use of ~/.my.cnf (STRONGLY RECOMMENDED)
# $MYSQLDUMP -u$mysql_user --result-file=$bkpfile $mysqldump_options $database 2>&1 | $TEE -a $logfile_tmp
#
# if you provide password (NOT RECOMMENDED)
# $MYSQLDUMP -u$mysql_user -p$mysql_password --result-file=$bkpfile $mysqldump_options $database 2>&1 | $TEE -a $logfile_tmp

# How bash-cloud-backup uses pg_dump command:
# When dumping Postgresql objects, the follow commands are executed:
#
# export PGPASSWORD=pg_password
# $PG_DUMP --username=$pg_user --file=$bkpfile $pg_dump_options $database 2>&1 | $TEE -a $logfile_tmp
# unset PGPASSWORD
#
# Export comands executed if you provide a password

# web site (Apache2) -----------------------------------------------------------
[website1]
type=files
# path relative to backuproot
path=www/website1
# prefix of backup files
prefix=website1
# define files to backup separated with delimiter
fileset=/var/www/website1
delimiter=,
starting_message=website1 backup is starting...
finish_message=website1 backup completed.

# split backup set with <tar_options_backup_file> ------------------------------
# this is a useful example of using <tar_options_backup_file>
# to exclude a (usually big) directory from a backup set
# NOTE: use --exclude=foo (no quotes) Do not use --exclude='foo'
[website1-no-media]
type=files
path=www/website1-no-media
prefix=website1-no-media
fileset=/var/www/website1
delimiter=,
starting_message=website1 (excluding media) backup is starting...
finish_message=website1 (excluding media) backup completed.
tar_options_backup_file=--exclude=var/www/website1/media -cpvf

[website1-media]
type=files
path=www/website1-media
prefix=website1-media
fileset=/var/www/website1/media
delimiter=,
starting_message=website1 media backup is starting...
finish_message=website1 media backup completed.

# mysql database ---------------------------------------------------------------
[mysqldb1]
type=mysql
path=mysql/mysqldb1
prefix=mysqldb1
database=mysqldb1
starting_message=mysqldb1 MySQL database backup is starting...
finish_message=mysqldb1 MySQL database backup completed.

# mysql database - no data -----------------------------------------------------
[mysqldb1-no-data]
type=mysql
path=mysql/mysqldb1-no-data
prefix=mysqldb1-no-data
mysqldump_options=--no-data
database=mysqldb1
starting_message=mysqldb1 (schema only) MySQL database backup is starting...
finish_message=mysqldb1 (schema only) MySQL database backup completed.

# all mysql databases ----------------------------------------------------------
[all-mysql-databases]
type=mysql
path=mysql/all-databases
prefix=all-databases
mysqldump_options=--all-databases
database=
starting_message=All MySQL databases backup is starting...
finish_message=All MySQL databases backup completed.

# Postgresql database ----------------------------------------------------------
[postgresdb1]
type=postgresql
path=postgresql/postgresdb1
prefix=postgresdb1
database=postgresdb1
starting_message=postgresdb1 Postgresql database backup is starting...
finish_message=postgresdb1 Postgresql database backup completed.

# Postgresql schema ------------------------------------------------------------
[postgresdb1-schema1]
type=postgresql
path=postgresdb1-schema1
prefix=postgresdb1-schema1
database=postgresdb1
pg_dump_options=-n schema1
starting_message=postgresdb1 schema1 Postgresql database schema backup is starting...
finish_message=postgresdb1 schema1 Postgresql database schema backup completed.

# Postgresql schema no data ----------------------------------------------------
[postgresdb1-schema1]
type=postgresql
path=postgresdb1-schema1
prefix=postgresdb1-schema1
database=postgresdb1
pg_dump_options=-n schema1 -s
starting_message=postgresdb1 schema1 Postgresql database schema (no data) backup is starting...
finish_message=postgresdb1 schema1 Postgresql database schema (no data) backup completed.

# backup System Configuration files --------------------------------------------
[conf-files]
type=files
path=conf
prefix=conf
fileset=/etc
delimiter=,
starting_message=System Configuration files backup is starting...
finish_message=System Configuration files backup completed.

# backup scripts ---------------------------------------------------------------
[scripts]
type=files
path=scripts
prefix=scripts
fileset=/store/scripts,/root/scripts
delimiter=,
starting_message=Scripts backup is starting...
finish_message=Scripts backup completed.

# pause backup after three sessions --------------------------------------------
# (do not backup ceaselessly inactive projects)
[foo]
type=files
path=foo
prefix=foo
fileset=/foo/bar1,/foo/bar2
delimiter=,
starting_message=Foo backup is starting...
finish_message=Foo backup completed.
skip_after=3
number_of_files_per_backup=1
skip_message=Foo backup is paused.
# ------------------------------------------------------------------------------